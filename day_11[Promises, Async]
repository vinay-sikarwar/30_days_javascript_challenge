//------------------------------------------------
// Activity 1 - Understanding Promises
// Task 1 - 
const PromiseOne = new Promise(function(resolve, reject){
    setTimeout(() => {
        resolve('Promise 1 resolved succesfully');
    }, 2000);
})
PromiseOne.then((msg) =>{
    console.log(msg);
});
// Task 2 -
const promiseTwo = new Promise((resolve, reject) =>{
    setTimeout(() => {
        let error = false;
        if(!error){
            resolve('Promise 2 is resolved');
        }else{
            reject('Error: 2 something went wrong')
        }
    }, 2000);
});
promiseTwo.then((msg)=>{
    console.log(msg);
}).catch(function(msg){
    console.log(msg);
})
//------------------------------------------------
// Activity 2 - Chaining Promises
// Task 3 - create a sequence of promises that simulate fetching data from a server
const promiseThree = new Promise((resolve, reject) =>{
    setTimeout(() => {
        let error = false;
        if(!error){
            resolve({'city': 'indore',
                'weather': {'temp': 25, 'wind': 125}
            });
        }else{
            reject('Something is wrong');
        }
    }, 3000);
})
promiseThree
    .then((Weather)=>{
    console.log(Weather.city);
    return Weather.weather
}).then((cond)=>{
    console.log(cond.temp);
}).catch((error)=>{
    console.log(error);
})

//------------------------------------------------
// Activity 3 - Using Async/Await
// Task 4 -
async function usePromiseByAsync(){
    const response = await PromiseOne;
    console.log(response);
}
usePromiseByAsync();

// Task 5 - try-catch
async function try_catch(){
    try {
        const response = await promiseTwo;
    } catch (error) {
        console.log('one of the promise is rejected', error);
    }
}

//------------------------------------------------
// Activity 4 - Fetching Data from an API
// Task 6 - 
fetch("https://jsonplaceholder.typicode.com/users")
  .then((res) => res.json())
  .then((data) => console.log("Response 1", data))
  .catch((err) => console.log(err));

console.log("\n");


// Task 7 -
async function newFact(){
    try{
        const response = await fetch("https://cat-fact.herokuapp.com/facts");
        const data = await response.json();
        console.log(data[0].text);
        
    }catch(error){
        console.log(error);
        
    }
}
newFact()
//------------------------------------------------
// Activity 5 - 
// Task 8 -
Promise.all([PromiseOne, promiseTwo, promiseThree])
    .then((result)=>{
        console.log('all promises resolved');
        console.log(result);
    }).catch((error)=>{
        console.log(error);
    })

// Task 9 - Promise.race is like a race between multiple promises. It waits for the first promise to finish, whether it succeeds (resolves) or fails (rejects). As soon as one of the promises completes, Promise.race settles with that promise's result or error.

const promise1 = new Promise((resolve, reject) => setTimeout(() => {
    resolve('Promise 1 resolved')
}, 1000));
const promise2 = new Promise((resolve, reject) => setTimeout(() => {
    resolve('Promise 2 resolved')
}, 1000));
const promise3 = new Promise((resolve, reject) => setTimeout(() => {
    resolve('Promise 3 resolved')
}, 1000));

Promise.race([promise1, promise2, promise3])
    .then((result)=>{
        console.log(result);
    })
    .catch((error)=>{
        console.log(error);
    })